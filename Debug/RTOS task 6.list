
RTOS task 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002cb8  08002cb8  00003cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d68  08002d68  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002d68  08002d68  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d68  08002d68  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d68  08002d68  00003d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d6c  08002d6c  00003d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002d70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000014  08002d84  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001030  08002d84  00004030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c828  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024aa  00000000  00000000  00010865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00012d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acf  00000000  00000000  00013b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181dc  00000000  00000000  000145f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fde9  00000000  00000000  0002c7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe65  00000000  00000000  0003c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  000cc464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000cfddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ca0 	.word	0x08002ca0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08002ca0 	.word	0x08002ca0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000030 	.word	0x20000030
 800017c:	20000084 	.word	0x20000084

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	@ 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa51 	bl	800062c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f849 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f883 	bl	8000298 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b1d      	ldr	r3, [pc, #116]	@ (8000208 <main+0x88>)
 8000194:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000198:	461d      	mov	r5, r3
 800019a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 fb73 	bl	8001898 <osThreadCreate>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a15      	ldr	r2, [pc, #84]	@ (800020c <main+0x8c>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of GreenLEDTask */
  osThreadDef(GreenLEDTask, green_led, osPriorityIdle, 0, 128);
 80001b8:	4b15      	ldr	r3, [pc, #84]	@ (8000210 <main+0x90>)
 80001ba:	f107 0420 	add.w	r4, r7, #32
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLEDTaskHandle = osThreadCreate(osThread(GreenLEDTask), NULL);
 80001cc:	f107 0320 	add.w	r3, r7, #32
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fb60 	bl	8001898 <osThreadCreate>
 80001d8:	4603      	mov	r3, r0
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <main+0x94>)
 80001dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of RedLEDTask */
  osThreadDef(RedLEDTask, red_led, osPriorityNormal, 0, 128);
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <main+0x98>)
 80001e0:	1d3c      	adds	r4, r7, #4
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedLEDTaskHandle = osThreadCreate(osThread(RedLEDTask), NULL);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fb4f 	bl	8001898 <osThreadCreate>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a07      	ldr	r2, [pc, #28]	@ (800021c <main+0x9c>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f001 fb43 	bl	800188a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <main+0x84>
 8000208:	08002cc4 	.word	0x08002cc4
 800020c:	20000284 	.word	0x20000284
 8000210:	08002cf0 	.word	0x08002cf0
 8000214:	20000288 	.word	0x20000288
 8000218:	08002d18 	.word	0x08002d18
 800021c:	2000028c 	.word	0x2000028c

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	@ 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	@ 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fd0a 	bl	8002c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fc96 	bl	8000b88 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000262:	f000 f8d7 	bl	8000414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ff04 	bl	800108c <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028a:	f000 f8c3 	bl	8000414 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	@ 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0304 	and.w	r3, r3, #4
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2107      	movs	r1, #7
 80002c8:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <MX_GPIO_Init+0x60>)
 80002ca:	f000 fc45 	bl	8000b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80002ce:	2307      	movs	r3, #7
 80002d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2302      	movs	r3, #2
 80002dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	4619      	mov	r1, r3
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_GPIO_Init+0x60>)
 80002e6:	f000 fab3 	bl	8000850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010800 	.word	0x40010800

080002fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f001 fb13 	bl	8001930 <osDelay>
 800030a:	e7fb      	b.n	8000304 <StartDefaultTask+0x8>

0800030c <green_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_green_led */
void green_led(void const * argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN green_led */
  /* Infinite loop */
	for(;;)
	  {
	    // Menyalakan LED hijau
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	4809      	ldr	r0, [pc, #36]	@ (8000340 <green_led+0x34>)
 800031a:	f000 fc1d 	bl	8000b58 <HAL_GPIO_WritePin>

	    // Masuk ke critical section untuk akses data bersama
	    taskENTER_CRITICAL();
 800031e:	f002 f9e5 	bl	80026ec <vPortEnterCritical>
	    accessSharedData();
 8000322:	f000 f82b 	bl	800037c <accessSharedData>
	    taskEXIT_CRITICAL(); // Keluar dari critical section
 8000326:	f002 fa11 	bl	800274c <vPortExitCritical>


	    // Mematikan LED hijau
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	4804      	ldr	r0, [pc, #16]	@ (8000340 <green_led+0x34>)
 8000330:	f000 fc12 	bl	8000b58 <HAL_GPIO_WritePin>

	    // Menunda selama 0.5 detik
	    osDelay(500);
 8000334:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000338:	f001 fafa 	bl	8001930 <osDelay>
	  {
 800033c:	bf00      	nop
 800033e:	e7e9      	b.n	8000314 <green_led+0x8>
 8000340:	40010800 	.word	0x40010800

08000344 <red_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_red_led */
void red_led(void const * argument)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN red_led */
  /* Infinite loop */
	 for(;;)
	  {
	    // Menyalakan LED merah
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	4809      	ldr	r0, [pc, #36]	@ (8000378 <red_led+0x34>)
 8000352:	f000 fc01 	bl	8000b58 <HAL_GPIO_WritePin>

	    // Masuk ke critical section untuk akses data bersama
	    taskENTER_CRITICAL();
 8000356:	f002 f9c9 	bl	80026ec <vPortEnterCritical>
	    accessSharedData();
 800035a:	f000 f80f 	bl	800037c <accessSharedData>
	    taskEXIT_CRITICAL(); // Keluar dari critical section
 800035e:	f002 f9f5 	bl	800274c <vPortExitCritical>


	    // Mematikan LED merah
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2102      	movs	r1, #2
 8000366:	4804      	ldr	r0, [pc, #16]	@ (8000378 <red_led+0x34>)
 8000368:	f000 fbf6 	bl	8000b58 <HAL_GPIO_WritePin>

	    // Menunda selama 0.1 detik
	    osDelay(100);
 800036c:	2064      	movs	r0, #100	@ 0x64
 800036e:	f001 fadf 	bl	8001930 <osDelay>
	  {
 8000372:	bf00      	nop
 8000374:	e7ea      	b.n	800034c <red_led+0x8>
 8000376:	bf00      	nop
 8000378:	40010800 	.word	0x40010800

0800037c <accessSharedData>:
	  }
  /* USER CODE END red_led */
}
void accessSharedData(void) {
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    if (startFlag == 1) {
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <accessSharedData+0x38>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b01      	cmp	r3, #1
 8000388:	d103      	bne.n	8000392 <accessSharedData+0x16>
        // Set Start flag to Down to indicate resource is in use
        startFlag = 0;
 800038a:	4b0a      	ldr	r3, [pc, #40]	@ (80003b4 <accessSharedData+0x38>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	e004      	b.n	800039c <accessSharedData+0x20>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2108      	movs	r1, #8
 8000396:	4808      	ldr	r0, [pc, #32]	@ (80003b8 <accessSharedData+0x3c>)
 8000398:	f000 fbde 	bl	8000b58 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
    SimulateReadWriteOperation();
 800039c:	f000 f80e 	bl	80003bc <SimulateReadWriteOperation>


    // Set Start flag back to Up to indicate resource is free
    startFlag = 1;
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <accessSharedData+0x38>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2108      	movs	r1, #8
 80003aa:	4803      	ldr	r0, [pc, #12]	@ (80003b8 <accessSharedData+0x3c>)
 80003ac:	f000 fbd4 	bl	8000b58 <HAL_GPIO_WritePin>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000000 	.word	0x20000000
 80003b8:	40010800 	.word	0x40010800

080003bc <SimulateReadWriteOperation>:

void SimulateReadWriteOperation(void) {
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
    volatile uint32_t delay_count = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
    const uint32_t delay_target = 400000; // Adjust this value to approximate 500 ms
 80003c6:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <SimulateReadWriteOperation+0x30>)
 80003c8:	607b      	str	r3, [r7, #4]

    // Dummy loop to simulate processing time
    for (delay_count = 0; delay_count < delay_target; delay_count++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	e003      	b.n	80003d8 <SimulateReadWriteOperation+0x1c>
        __asm("nop"); // No Operation: Keeps the processor busy without changing code behavior
 80003d0:	bf00      	nop
    for (delay_count = 0; delay_count < delay_target; delay_count++) {
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	3301      	adds	r3, #1
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d8f7      	bhi.n	80003d0 <SimulateReadWriteOperation+0x14>
    }
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	00061a80 	.word	0x00061a80

080003f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d101      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000402:	f000 f929 	bl	8000658 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40000800 	.word	0x40000800

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <Error_Handler+0x8>

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <HAL_MspInit+0x68>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a17      	ldr	r2, [pc, #92]	@ (8000488 <HAL_MspInit+0x68>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <HAL_MspInit+0x68>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_MspInit+0x68>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a11      	ldr	r2, [pc, #68]	@ (8000488 <HAL_MspInit+0x68>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <HAL_MspInit+0x68>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	210f      	movs	r1, #15
 800045a:	f06f 0001 	mvn.w	r0, #1
 800045e:	f000 f9cc 	bl	80007fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <HAL_MspInit+0x6c>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	@ (800048c <HAL_MspInit+0x6c>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08e      	sub	sp, #56	@ 0x38
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000498:	2300      	movs	r3, #0
 800049a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800049c:	2300      	movs	r3, #0
 800049e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004a6:	4b34      	ldr	r3, [pc, #208]	@ (8000578 <HAL_InitTick+0xe8>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a33      	ldr	r2, [pc, #204]	@ (8000578 <HAL_InitTick+0xe8>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b31      	ldr	r3, [pc, #196]	@ (8000578 <HAL_InitTick+0xe8>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004be:	f107 0210 	add.w	r2, r7, #16
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 ff3b 	bl	8001344 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004ce:	6a3b      	ldr	r3, [r7, #32]
 80004d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d103      	bne.n	80004e0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004d8:	f000 ff20 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 80004dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80004de:	e004      	b.n	80004ea <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004e0:	f000 ff1c 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 80004e4:	4603      	mov	r3, r0
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ec:	4a23      	ldr	r2, [pc, #140]	@ (800057c <HAL_InitTick+0xec>)
 80004ee:	fba2 2303 	umull	r2, r3, r2, r3
 80004f2:	0c9b      	lsrs	r3, r3, #18
 80004f4:	3b01      	subs	r3, #1
 80004f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004f8:	4b21      	ldr	r3, [pc, #132]	@ (8000580 <HAL_InitTick+0xf0>)
 80004fa:	4a22      	ldr	r2, [pc, #136]	@ (8000584 <HAL_InitTick+0xf4>)
 80004fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80004fe:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <HAL_InitTick+0xf0>)
 8000500:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000504:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000506:	4a1e      	ldr	r2, [pc, #120]	@ (8000580 <HAL_InitTick+0xf0>)
 8000508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800050a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800050c:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <HAL_InitTick+0xf0>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b1b      	ldr	r3, [pc, #108]	@ (8000580 <HAL_InitTick+0xf0>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <HAL_InitTick+0xf0>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800051e:	4818      	ldr	r0, [pc, #96]	@ (8000580 <HAL_InitTick+0xf0>)
 8000520:	f000 ff5e 	bl	80013e0 <HAL_TIM_Base_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800052a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800052e:	2b00      	cmp	r3, #0
 8000530:	d11b      	bne.n	800056a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000532:	4813      	ldr	r0, [pc, #76]	@ (8000580 <HAL_InitTick+0xf0>)
 8000534:	f000 ffac 	bl	8001490 <HAL_TIM_Base_Start_IT>
 8000538:	4603      	mov	r3, r0
 800053a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800053e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000542:	2b00      	cmp	r3, #0
 8000544:	d111      	bne.n	800056a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000546:	201e      	movs	r0, #30
 8000548:	f000 f973 	bl	8000832 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b0f      	cmp	r3, #15
 8000550:	d808      	bhi.n	8000564 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000552:	2200      	movs	r2, #0
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	201e      	movs	r0, #30
 8000558:	f000 f94f 	bl	80007fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800055c:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <HAL_InitTick+0xf8>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	e002      	b.n	800056a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000564:	2301      	movs	r3, #1
 8000566:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800056a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800056e:	4618      	mov	r0, r3
 8000570:	3738      	adds	r7, #56	@ 0x38
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	431bde83 	.word	0x431bde83
 8000580:	20000290 	.word	0x20000290
 8000584:	40000800 	.word	0x40000800
 8000588:	20000008 	.word	0x20000008

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <NMI_Handler+0x4>

08000594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <MemManage_Handler+0x4>

080005a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <BusFault_Handler+0x4>

080005ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <UsageFault_Handler+0x4>

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <TIM4_IRQHandler+0x10>)
 80005c6:	f000 ffb5 	bl	8001534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000290 	.word	0x20000290

080005d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e0:	f7ff fff8 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480b      	ldr	r0, [pc, #44]	@ (8000614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e6:	490c      	ldr	r1, [pc, #48]	@ (8000618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e8:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a09      	ldr	r2, [pc, #36]	@ (8000620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005fc:	4c09      	ldr	r4, [pc, #36]	@ (8000624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060a:	f002 fb25 	bl	8002c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fdb7 	bl	8000180 <main>
  bx lr
 8000612:	4770      	bx	lr
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800061c:	08002d70 	.word	0x08002d70
  ldr r2, =_sbss
 8000620:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000624:	20001030 	.word	0x20001030

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <HAL_Init+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	@ (8000654 <HAL_Init+0x28>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f8d1 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000642:	200f      	movs	r0, #15
 8000644:	f7ff ff24 	bl	8000490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f7ff feea 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HAL_IncTick+0x1c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_IncTick+0x20>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4413      	add	r3, r2
 8000668:	4a03      	ldr	r2, [pc, #12]	@ (8000678 <HAL_IncTick+0x20>)
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	2000000c 	.word	0x2000000c
 8000678:	200002d8 	.word	0x200002d8

0800067c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b02      	ldr	r3, [pc, #8]	@ (800068c <HAL_GetTick+0x10>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	200002d8 	.word	0x200002d8

08000690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c2:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	60d3      	str	r3, [r2, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006dc:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <__NVIC_GetPriorityGrouping+0x18>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f003 0307 	and.w	r3, r3, #7
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db0b      	blt.n	800071e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 021f 	and.w	r2, r3, #31
 800070c:	4906      	ldr	r1, [pc, #24]	@ (8000728 <__NVIC_EnableIRQ+0x34>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	2001      	movs	r0, #1
 8000716:	fa00 f202 	lsl.w	r2, r0, r2
 800071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	@ (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	@ (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	@ 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	@ 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff4f 	bl	8000690 <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff64 	bl	80006d8 <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ffb2 	bl	8000780 <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff81 	bl	800072c <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff57 	bl	80006f4 <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b08b      	sub	sp, #44	@ 0x2c
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000862:	e169      	b.n	8000b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000864:	2201      	movs	r2, #1
 8000866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	429a      	cmp	r2, r3
 800087e:	f040 8158 	bne.w	8000b32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	4a9a      	ldr	r2, [pc, #616]	@ (8000af0 <HAL_GPIO_Init+0x2a0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d05e      	beq.n	800094a <HAL_GPIO_Init+0xfa>
 800088c:	4a98      	ldr	r2, [pc, #608]	@ (8000af0 <HAL_GPIO_Init+0x2a0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d875      	bhi.n	800097e <HAL_GPIO_Init+0x12e>
 8000892:	4a98      	ldr	r2, [pc, #608]	@ (8000af4 <HAL_GPIO_Init+0x2a4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d058      	beq.n	800094a <HAL_GPIO_Init+0xfa>
 8000898:	4a96      	ldr	r2, [pc, #600]	@ (8000af4 <HAL_GPIO_Init+0x2a4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d86f      	bhi.n	800097e <HAL_GPIO_Init+0x12e>
 800089e:	4a96      	ldr	r2, [pc, #600]	@ (8000af8 <HAL_GPIO_Init+0x2a8>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d052      	beq.n	800094a <HAL_GPIO_Init+0xfa>
 80008a4:	4a94      	ldr	r2, [pc, #592]	@ (8000af8 <HAL_GPIO_Init+0x2a8>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d869      	bhi.n	800097e <HAL_GPIO_Init+0x12e>
 80008aa:	4a94      	ldr	r2, [pc, #592]	@ (8000afc <HAL_GPIO_Init+0x2ac>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d04c      	beq.n	800094a <HAL_GPIO_Init+0xfa>
 80008b0:	4a92      	ldr	r2, [pc, #584]	@ (8000afc <HAL_GPIO_Init+0x2ac>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d863      	bhi.n	800097e <HAL_GPIO_Init+0x12e>
 80008b6:	4a92      	ldr	r2, [pc, #584]	@ (8000b00 <HAL_GPIO_Init+0x2b0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d046      	beq.n	800094a <HAL_GPIO_Init+0xfa>
 80008bc:	4a90      	ldr	r2, [pc, #576]	@ (8000b00 <HAL_GPIO_Init+0x2b0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d85d      	bhi.n	800097e <HAL_GPIO_Init+0x12e>
 80008c2:	2b12      	cmp	r3, #18
 80008c4:	d82a      	bhi.n	800091c <HAL_GPIO_Init+0xcc>
 80008c6:	2b12      	cmp	r3, #18
 80008c8:	d859      	bhi.n	800097e <HAL_GPIO_Init+0x12e>
 80008ca:	a201      	add	r2, pc, #4	@ (adr r2, 80008d0 <HAL_GPIO_Init+0x80>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	0800094b 	.word	0x0800094b
 80008d4:	08000925 	.word	0x08000925
 80008d8:	08000937 	.word	0x08000937
 80008dc:	08000979 	.word	0x08000979
 80008e0:	0800097f 	.word	0x0800097f
 80008e4:	0800097f 	.word	0x0800097f
 80008e8:	0800097f 	.word	0x0800097f
 80008ec:	0800097f 	.word	0x0800097f
 80008f0:	0800097f 	.word	0x0800097f
 80008f4:	0800097f 	.word	0x0800097f
 80008f8:	0800097f 	.word	0x0800097f
 80008fc:	0800097f 	.word	0x0800097f
 8000900:	0800097f 	.word	0x0800097f
 8000904:	0800097f 	.word	0x0800097f
 8000908:	0800097f 	.word	0x0800097f
 800090c:	0800097f 	.word	0x0800097f
 8000910:	0800097f 	.word	0x0800097f
 8000914:	0800092d 	.word	0x0800092d
 8000918:	08000941 	.word	0x08000941
 800091c:	4a79      	ldr	r2, [pc, #484]	@ (8000b04 <HAL_GPIO_Init+0x2b4>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d013      	beq.n	800094a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000922:	e02c      	b.n	800097e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	623b      	str	r3, [r7, #32]
          break;
 800092a:	e029      	b.n	8000980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	3304      	adds	r3, #4
 8000932:	623b      	str	r3, [r7, #32]
          break;
 8000934:	e024      	b.n	8000980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	3308      	adds	r3, #8
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e01f      	b.n	8000980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	330c      	adds	r3, #12
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e01a      	b.n	8000980 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000952:	2304      	movs	r3, #4
 8000954:	623b      	str	r3, [r7, #32]
          break;
 8000956:	e013      	b.n	8000980 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d105      	bne.n	800096c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000960:	2308      	movs	r3, #8
 8000962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	611a      	str	r2, [r3, #16]
          break;
 800096a:	e009      	b.n	8000980 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	615a      	str	r2, [r3, #20]
          break;
 8000976:	e003      	b.n	8000980 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	e000      	b.n	8000980 <HAL_GPIO_Init+0x130>
          break;
 800097e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	2bff      	cmp	r3, #255	@ 0xff
 8000984:	d801      	bhi.n	800098a <HAL_GPIO_Init+0x13a>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	e001      	b.n	800098e <HAL_GPIO_Init+0x13e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3304      	adds	r3, #4
 800098e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	2bff      	cmp	r3, #255	@ 0xff
 8000994:	d802      	bhi.n	800099c <HAL_GPIO_Init+0x14c>
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	e002      	b.n	80009a2 <HAL_GPIO_Init+0x152>
 800099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099e:	3b08      	subs	r3, #8
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	210f      	movs	r1, #15
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	401a      	ands	r2, r3
 80009b4:	6a39      	ldr	r1, [r7, #32]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	431a      	orrs	r2, r3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 80b1 	beq.w	8000b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b08 <HAL_GPIO_Init+0x2b8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a4c      	ldr	r2, [pc, #304]	@ (8000b08 <HAL_GPIO_Init+0x2b8>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000b08 <HAL_GPIO_Init+0x2b8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e8:	4a48      	ldr	r2, [pc, #288]	@ (8000b0c <HAL_GPIO_Init+0x2bc>)
 80009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a40      	ldr	r2, [pc, #256]	@ (8000b10 <HAL_GPIO_Init+0x2c0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d013      	beq.n	8000a3c <HAL_GPIO_Init+0x1ec>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a3f      	ldr	r2, [pc, #252]	@ (8000b14 <HAL_GPIO_Init+0x2c4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d00d      	beq.n	8000a38 <HAL_GPIO_Init+0x1e8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b18 <HAL_GPIO_Init+0x2c8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d007      	beq.n	8000a34 <HAL_GPIO_Init+0x1e4>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3d      	ldr	r2, [pc, #244]	@ (8000b1c <HAL_GPIO_Init+0x2cc>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d101      	bne.n	8000a30 <HAL_GPIO_Init+0x1e0>
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e006      	b.n	8000a3e <HAL_GPIO_Init+0x1ee>
 8000a30:	2304      	movs	r3, #4
 8000a32:	e004      	b.n	8000a3e <HAL_GPIO_Init+0x1ee>
 8000a34:	2302      	movs	r3, #2
 8000a36:	e002      	b.n	8000a3e <HAL_GPIO_Init+0x1ee>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_GPIO_Init+0x1ee>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a40:	f002 0203 	and.w	r2, r2, #3
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4e:	492f      	ldr	r1, [pc, #188]	@ (8000b0c <HAL_GPIO_Init+0x2bc>)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3302      	adds	r3, #2
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a68:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	492c      	ldr	r1, [pc, #176]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	608b      	str	r3, [r1, #8]
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	4928      	ldr	r1, [pc, #160]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	4922      	ldr	r1, [pc, #136]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	60cb      	str	r3, [r1, #12]
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a9e:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	491e      	ldr	r1, [pc, #120]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab8:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4918      	ldr	r1, [pc, #96]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	604b      	str	r3, [r1, #4]
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	4914      	ldr	r1, [pc, #80]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d021      	beq.n	8000b24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	490e      	ldr	r1, [pc, #56]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	600b      	str	r3, [r1, #0]
 8000aec:	e021      	b.n	8000b32 <HAL_GPIO_Init+0x2e2>
 8000aee:	bf00      	nop
 8000af0:	10320000 	.word	0x10320000
 8000af4:	10310000 	.word	0x10310000
 8000af8:	10220000 	.word	0x10220000
 8000afc:	10210000 	.word	0x10210000
 8000b00:	10120000 	.word	0x10120000
 8000b04:	10110000 	.word	0x10110000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000
 8000b10:	40010800 	.word	0x40010800
 8000b14:	40010c00 	.word	0x40010c00
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	40011400 	.word	0x40011400
 8000b20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <HAL_GPIO_Init+0x304>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	4909      	ldr	r1, [pc, #36]	@ (8000b54 <HAL_GPIO_Init+0x304>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	3301      	adds	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae8e 	bne.w	8000864 <HAL_GPIO_Init+0x14>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	372c      	adds	r7, #44	@ 0x2c
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40010400 	.word	0x40010400

08000b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
 8000b64:	4613      	mov	r3, r2
 8000b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b68:	787b      	ldrb	r3, [r7, #1]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b74:	e003      	b.n	8000b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	041a      	lsls	r2, r3, #16
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	611a      	str	r2, [r3, #16]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e272      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 8087 	beq.w	8000cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba8:	4b92      	ldr	r3, [pc, #584]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d00c      	beq.n	8000bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d112      	bne.n	8000be6 <HAL_RCC_OscConfig+0x5e>
 8000bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bcc:	d10b      	bne.n	8000be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bce:	4b89      	ldr	r3, [pc, #548]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d06c      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x12c>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d168      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e24c      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bee:	d106      	bne.n	8000bfe <HAL_RCC_OscConfig+0x76>
 8000bf0:	4b80      	ldr	r3, [pc, #512]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a7f      	ldr	r2, [pc, #508]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e02e      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10c      	bne.n	8000c20 <HAL_RCC_OscConfig+0x98>
 8000c06:	4b7b      	ldr	r3, [pc, #492]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a7a      	ldr	r2, [pc, #488]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	4b78      	ldr	r3, [pc, #480]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a77      	ldr	r2, [pc, #476]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e01d      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0xbc>
 8000c2a:	4b72      	ldr	r3, [pc, #456]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a71      	ldr	r2, [pc, #452]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b6f      	ldr	r3, [pc, #444]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e00b      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000c44:	4b6b      	ldr	r3, [pc, #428]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a6a      	ldr	r2, [pc, #424]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b68      	ldr	r3, [pc, #416]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a67      	ldr	r2, [pc, #412]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fd0a 	bl	800067c <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fd06 	bl	800067c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	@ 0x64
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e200      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f0      	beq.n	8000c6c <HAL_RCC_OscConfig+0xe4>
 8000c8a:	e014      	b.n	8000cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8c:	f7ff fcf6 	bl	800067c <HAL_GetTick>
 8000c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c94:	f7ff fcf2 	bl	800067c <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b64      	cmp	r3, #100	@ 0x64
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e1ec      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca6:	4b53      	ldr	r3, [pc, #332]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f0      	bne.n	8000c94 <HAL_RCC_OscConfig+0x10c>
 8000cb2:	e000      	b.n	8000cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d063      	beq.n	8000d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cce:	4b49      	ldr	r3, [pc, #292]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d11c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x18c>
 8000cda:	4b46      	ldr	r3, [pc, #280]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d116      	bne.n	8000d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	4b43      	ldr	r3, [pc, #268]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <HAL_RCC_OscConfig+0x176>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d001      	beq.n	8000cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e1c0      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	4939      	ldr	r1, [pc, #228]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d12:	e03a      	b.n	8000d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d020      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d1c:	4b36      	ldr	r3, [pc, #216]	@ (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d22:	f7ff fcab 	bl	800067c <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fca7 	bl	800067c <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e1a1      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f0      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d48:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4927      	ldr	r1, [pc, #156]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]
 8000d5c:	e015      	b.n	8000d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fc8a 	bl	800067c <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fc86 	bl	800067c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e180      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d03a      	beq.n	8000e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d019      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_RCC_OscConfig+0x274>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc6a 	bl	800067c <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc66 	bl	800067c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e160      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 faea 	bl	80013a4 <RCC_Delay>
 8000dd0:	e01c      	b.n	8000e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_RCC_OscConfig+0x274>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fc50 	bl	800067c <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dde:	e00f      	b.n	8000e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc4c 	bl	800067c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d908      	bls.n	8000e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e146      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	42420000 	.word	0x42420000
 8000dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e00:	4b92      	ldr	r3, [pc, #584]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1e9      	bne.n	8000de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80a6 	beq.w	8000f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10d      	bne.n	8000e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b88      	ldr	r3, [pc, #544]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a87      	ldr	r2, [pc, #540]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b85      	ldr	r3, [pc, #532]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e42:	2301      	movs	r3, #1
 8000e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e46:	4b82      	ldr	r3, [pc, #520]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d118      	bne.n	8000e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e52:	4b7f      	ldr	r3, [pc, #508]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a7e      	ldr	r2, [pc, #504]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fc0d 	bl	800067c <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e66:	f7ff fc09 	bl	800067c <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b64      	cmp	r3, #100	@ 0x64
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e103      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	4b75      	ldr	r3, [pc, #468]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x312>
 8000e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a6e      	ldr	r2, [pc, #440]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6213      	str	r3, [r2, #32]
 8000e98:	e02d      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x334>
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a69      	ldr	r2, [pc, #420]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6213      	str	r3, [r2, #32]
 8000eae:	4b67      	ldr	r3, [pc, #412]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a66      	ldr	r2, [pc, #408]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0304 	bic.w	r3, r3, #4
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	e01c      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d10c      	bne.n	8000ede <HAL_RCC_OscConfig+0x356>
 8000ec4:	4b61      	ldr	r3, [pc, #388]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a60      	ldr	r2, [pc, #384]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	e00b      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000ede:	4b5b      	ldr	r3, [pc, #364]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	4b58      	ldr	r3, [pc, #352]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a57      	ldr	r2, [pc, #348]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d015      	beq.n	8000f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fbbd 	bl	800067c <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fbb9 	bl	800067c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e0b1      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0ee      	beq.n	8000f06 <HAL_RCC_OscConfig+0x37e>
 8000f28:	e014      	b.n	8000f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fba7 	bl	800067c <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fba3 	bl	800067c <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e09b      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	4b40      	ldr	r3, [pc, #256]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1ee      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8087 	beq.w	800107e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d061      	beq.n	8001040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d146      	bne.n	8001012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f84:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fb77 	bl	800067c <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff fb73 	bl	800067c <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e06d      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f0      	bne.n	8000f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb8:	d108      	bne.n	8000fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fba:	4b24      	ldr	r3, [pc, #144]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	4921      	ldr	r1, [pc, #132]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a19      	ldr	r1, [r3, #32]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	491b      	ldr	r1, [pc, #108]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb47 	bl	800067c <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fb43 	bl	800067c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e03d      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x46a>
 8001010:	e035      	b.n	800107e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fb30 	bl	800067c <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fb2c 	bl	800067c <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e026      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x498>
 800103e:	e01e      	b.n	800107e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e019      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
 800104c:	40021000 	.word	0x40021000
 8001050:	40007000 	.word	0x40007000
 8001054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_RCC_OscConfig+0x500>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	429a      	cmp	r2, r3
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	429a      	cmp	r2, r3
 8001078:	d001      	beq.n	800107e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0d0      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a0:	4b6a      	ldr	r3, [pc, #424]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d910      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b67      	ldr	r3, [pc, #412]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 0207 	bic.w	r2, r3, #7
 80010b6:	4965      	ldr	r1, [pc, #404]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b63      	ldr	r3, [pc, #396]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0b8      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e8:	4b59      	ldr	r3, [pc, #356]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a58      	ldr	r2, [pc, #352]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001100:	4b53      	ldr	r3, [pc, #332]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a52      	ldr	r2, [pc, #328]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800110a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4b50      	ldr	r3, [pc, #320]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	494d      	ldr	r1, [pc, #308]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d040      	beq.n	80011ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b47      	ldr	r3, [pc, #284]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d115      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e07f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4b41      	ldr	r3, [pc, #260]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e073      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e06b      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4b39      	ldr	r3, [pc, #228]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f023 0203 	bic.w	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4936      	ldr	r1, [pc, #216]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800117c:	f7ff fa7e 	bl	800067c <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	e00a      	b.n	800119a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fa7a 	bl	800067c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e053      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 020c 	and.w	r2, r3, #12
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d1eb      	bne.n	8001184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d210      	bcs.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4922      	ldr	r1, [pc, #136]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e032      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4916      	ldr	r1, [pc, #88]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	490e      	ldr	r1, [pc, #56]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121a:	f000 f821 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	490a      	ldr	r1, [pc, #40]	@ (8001254 <HAL_RCC_ClockConfig+0x1c8>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <HAL_RCC_ClockConfig+0x1cc>)
 8001234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_RCC_ClockConfig+0x1d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f928 	bl	8000490 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	08002d3c 	.word	0x08002d3c
 8001258:	20000004 	.word	0x20000004
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d002      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x30>
 800128a:	2b08      	cmp	r3, #8
 800128c:	d003      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x36>
 800128e:	e027      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001292:	613b      	str	r3, [r7, #16]
      break;
 8001294:	e027      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	0c9b      	lsrs	r3, r3, #18
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a0:	5cd3      	ldrb	r3, [r2, r3]
 80012a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d010      	beq.n	80012d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	0c5b      	lsrs	r3, r3, #17
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012c2:	fb03 f202 	mul.w	r2, r3, r2
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e004      	b.n	80012da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	613b      	str	r3, [r7, #16]
      break;
 80012de:	e002      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012e2:	613b      	str	r3, [r7, #16]
      break;
 80012e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012e6:	693b      	ldr	r3, [r7, #16]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	007a1200 	.word	0x007a1200
 80012fc:	08002d54 	.word	0x08002d54
 8001300:	08002d64 	.word	0x08002d64
 8001304:	003d0900 	.word	0x003d0900

08001308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800130c:	4b02      	ldr	r3, [pc, #8]	@ (8001318 <HAL_RCC_GetHCLKFreq+0x10>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001320:	f7ff fff2 	bl	8001308 <HAL_RCC_GetHCLKFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4903      	ldr	r1, [pc, #12]	@ (8001340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	08002d4c 	.word	0x08002d4c

08001344 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	220f      	movs	r2, #15
 8001352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <HAL_RCC_GetClockConfig+0x58>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001360:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <HAL_RCC_GetClockConfig+0x58>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <HAL_RCC_GetClockConfig+0x58>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <HAL_RCC_GetClockConfig+0x58>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0207 	and.w	r2, r3, #7
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40022000 	.word	0x40022000

080013a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <RCC_Delay+0x34>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <RCC_Delay+0x38>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0a5b      	lsrs	r3, r3, #9
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013c0:	bf00      	nop
  }
  while (Delay --);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	60fa      	str	r2, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f9      	bne.n	80013c0 <RCC_Delay+0x1c>
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000004 	.word	0x20000004
 80013dc:	10624dd3 	.word	0x10624dd3

080013e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e041      	b.n	8001476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f839 	bl	800147e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4610      	mov	r0, r2
 8001420:	f000 f99c 	bl	800175c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d001      	beq.n	80014a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e03a      	b.n	800151e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2202      	movs	r2, #2
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <HAL_TIM_Base_Start_IT+0x98>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00e      	beq.n	80014e8 <HAL_TIM_Base_Start_IT+0x58>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d2:	d009      	beq.n	80014e8 <HAL_TIM_Base_Start_IT+0x58>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <HAL_TIM_Base_Start_IT+0x9c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d004      	beq.n	80014e8 <HAL_TIM_Base_Start_IT+0x58>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_TIM_Base_Start_IT+0xa0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d111      	bne.n	800150c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d010      	beq.n	800151c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0201 	orr.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800150a:	e007      	b.n	800151c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	40012c00 	.word	0x40012c00
 800152c:	40000400 	.word	0x40000400
 8001530:	40000800 	.word	0x40000800

08001534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d020      	beq.n	8001598 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01b      	beq.n	8001598 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f06f 0202 	mvn.w	r2, #2
 8001568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f8d1 	bl	8001726 <HAL_TIM_IC_CaptureCallback>
 8001584:	e005      	b.n	8001592 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8c4 	bl	8001714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f8d3 	bl	8001738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d020      	beq.n	80015e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01b      	beq.n	80015e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0204 	mvn.w	r2, #4
 80015b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2202      	movs	r2, #2
 80015ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f8ab 	bl	8001726 <HAL_TIM_IC_CaptureCallback>
 80015d0:	e005      	b.n	80015de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f89e 	bl	8001714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8ad 	bl	8001738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d020      	beq.n	8001630 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01b      	beq.n	8001630 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f06f 0208 	mvn.w	r2, #8
 8001600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2204      	movs	r2, #4
 8001606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f885 	bl	8001726 <HAL_TIM_IC_CaptureCallback>
 800161c:	e005      	b.n	800162a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f878 	bl	8001714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f887 	bl	8001738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d020      	beq.n	800167c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01b      	beq.n	800167c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0210 	mvn.w	r2, #16
 800164c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2208      	movs	r2, #8
 8001652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f85f 	bl	8001726 <HAL_TIM_IC_CaptureCallback>
 8001668:	e005      	b.n	8001676 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f852 	bl	8001714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f861 	bl	8001738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00c      	beq.n	80016a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0201 	mvn.w	r2, #1
 8001698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe fea8 	bl	80003f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00c      	beq.n	80016c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80016bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f8c3 	bl	800184a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00c      	beq.n	80016e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80016e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f831 	bl	800174a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f003 0320 	and.w	r3, r3, #32
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00c      	beq.n	800170c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d007      	beq.n	800170c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0220 	mvn.w	r2, #32
 8001704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f896 	bl	8001838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a2f      	ldr	r2, [pc, #188]	@ (800182c <TIM_Base_SetConfig+0xd0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00b      	beq.n	800178c <TIM_Base_SetConfig+0x30>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800177a:	d007      	beq.n	800178c <TIM_Base_SetConfig+0x30>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a2c      	ldr	r2, [pc, #176]	@ (8001830 <TIM_Base_SetConfig+0xd4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d003      	beq.n	800178c <TIM_Base_SetConfig+0x30>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <TIM_Base_SetConfig+0xd8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d108      	bne.n	800179e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a22      	ldr	r2, [pc, #136]	@ (800182c <TIM_Base_SetConfig+0xd0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00b      	beq.n	80017be <TIM_Base_SetConfig+0x62>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ac:	d007      	beq.n	80017be <TIM_Base_SetConfig+0x62>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <TIM_Base_SetConfig+0xd4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d003      	beq.n	80017be <TIM_Base_SetConfig+0x62>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001834 <TIM_Base_SetConfig+0xd8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d108      	bne.n	80017d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <TIM_Base_SetConfig+0xd0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d103      	bne.n	8001804 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f023 0201 	bic.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	611a      	str	r2, [r3, #16]
  }
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40012c00 	.word	0x40012c00
 8001830:	40000400 	.word	0x40000400
 8001834:	40000800 	.word	0x40000800

08001838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800186a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186e:	2b84      	cmp	r3, #132	@ 0x84
 8001870:	d005      	beq.n	800187e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	3303      	adds	r3, #3
 800187c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800188e:	f000 fadf 	bl	8001e50 <vTaskStartScheduler>
  
  return osOK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}

08001898 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af04      	add	r7, sp, #16
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d020      	beq.n	80018ec <osThreadCreate+0x54>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01c      	beq.n	80018ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685c      	ldr	r4, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691e      	ldr	r6, [r3, #16]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ffc9 	bl	800185c <makeFreeRtosPriority>
 80018ca:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018d4:	9202      	str	r2, [sp, #8]
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	9100      	str	r1, [sp, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4632      	mov	r2, r6
 80018de:	4629      	mov	r1, r5
 80018e0:	4620      	mov	r0, r4
 80018e2:	f000 f8e8 	bl	8001ab6 <xTaskCreateStatic>
 80018e6:	4603      	mov	r3, r0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e01c      	b.n	8001926 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685c      	ldr	r4, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018f8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ffab 	bl	800185c <makeFreeRtosPriority>
 8001906:	4602      	mov	r2, r0
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4632      	mov	r2, r6
 8001914:	4629      	mov	r1, r5
 8001916:	4620      	mov	r0, r4
 8001918:	f000 f92d 	bl	8001b76 <xTaskCreate>
 800191c:	4603      	mov	r3, r0
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001930 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <osDelay+0x16>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	e000      	b.n	8001948 <osDelay+0x18>
 8001946:	2301      	movs	r3, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fa4b 	bl	8001de4 <vTaskDelay>
  
  return osOK;
 800194e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f103 0208 	add.w	r2, r3, #8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 0208 	add.w	r2, r3, #8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f103 0208 	add.w	r2, r3, #8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0a:	d103      	bne.n	8001a14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e00c      	b.n	8001a2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3308      	adds	r3, #8
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e002      	b.n	8001a22 <vListInsert+0x2e>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d2f6      	bcs.n	8001a1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6892      	ldr	r2, [r2, #8]
 8001a7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6852      	ldr	r2, [r2, #4]
 8001a84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d103      	bne.n	8001a98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1e5a      	subs	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08e      	sub	sp, #56	@ 0x38
 8001aba:	af04      	add	r7, sp, #16
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10b      	bne.n	8001ae2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ace:	f383 8811 	msr	BASEPRI, r3
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	f3bf 8f4f 	dsb	sy
 8001ada:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	e7fd      	b.n	8001ade <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	61fb      	str	r3, [r7, #28]
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001b00:	2354      	movs	r3, #84	@ 0x54
 8001b02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b54      	cmp	r3, #84	@ 0x54
 8001b08:	d00b      	beq.n	8001b22 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	61bb      	str	r3, [r7, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	e7fd      	b.n	8001b1e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001b22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01e      	beq.n	8001b68 <xTaskCreateStatic+0xb2>
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b38:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001b42:	2300      	movs	r3, #0
 8001b44:	9303      	str	r3, [sp, #12]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f850 	bl	8001c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b62:	f000 f8d5 	bl	8001d10 <prvAddNewTaskToReadyList>
 8001b66:	e001      	b.n	8001b6c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001b6c:	697b      	ldr	r3, [r7, #20]
	}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3728      	adds	r7, #40	@ 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b08c      	sub	sp, #48	@ 0x30
 8001b7a:	af04      	add	r7, sp, #16
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fe70 	bl	8002870 <pvPortMalloc>
 8001b90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b98:	2054      	movs	r0, #84	@ 0x54
 8001b9a:	f000 fe69 	bl	8002870 <pvPortMalloc>
 8001b9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bac:	e005      	b.n	8001bba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f000 ff2c 	bl	8002a0c <vPortFree>
 8001bb4:	e001      	b.n	8001bba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d017      	beq.n	8001bf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f80e 	bl	8001c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001be4:	69f8      	ldr	r0, [r7, #28]
 8001be6:	f000 f893 	bl	8001d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	e002      	b.n	8001bf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001bf6:	69bb      	ldr	r3, [r7, #24]
	}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f023 0307 	bic.w	r3, r3, #7
 8001c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	617b      	str	r3, [r7, #20]
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	e7fd      	b.n	8001c46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01f      	beq.n	8001c90 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	e012      	b.n	8001c7c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	7819      	ldrb	r1, [r3, #0]
 8001c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4413      	add	r3, r2
 8001c64:	3334      	adds	r3, #52	@ 0x34
 8001c66:	460a      	mov	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	d9e9      	bls.n	8001c56 <prvInitialiseNewTask+0x56>
 8001c82:	e000      	b.n	8001c86 <prvInitialiseNewTask+0x86>
			{
				break;
 8001c84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c8e:	e003      	b.n	8001c98 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d901      	bls.n	8001ca2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe6c 	bl	8001996 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc0:	3318      	adds	r3, #24
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe67 	bl	8001996 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ccc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd0:	f1c3 0207 	rsb	r2, r3, #7
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	69b8      	ldr	r0, [r7, #24]
 8001cf2:	f000 fc0d 	bl	8002510 <pxPortInitialiseStack>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d18:	f000 fce8 	bl	80026ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <prvAddNewTaskToReadyList+0xb8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a29      	ldr	r2, [pc, #164]	@ (8001dc8 <prvAddNewTaskToReadyList+0xb8>)
 8001d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001d26:	4b29      	ldr	r3, [pc, #164]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d2e:	4a27      	ldr	r2, [pc, #156]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d34:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <prvAddNewTaskToReadyList+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d110      	bne.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001d3c:	f000 fac4 	bl	80022c8 <prvInitialiseTaskLists>
 8001d40:	e00d      	b.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <prvAddNewTaskToReadyList+0xc0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d802      	bhi.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001d58:	4a1c      	ldr	r2, [pc, #112]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <prvAddNewTaskToReadyList+0xc4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <prvAddNewTaskToReadyList+0xc4>)
 8001d66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <prvAddNewTaskToReadyList+0xc8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <prvAddNewTaskToReadyList+0xc8>)
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <prvAddNewTaskToReadyList+0xcc>)
 8001d88:	441a      	add	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f7ff fe0c 	bl	80019ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d96:	f000 fcd9 	bl	800274c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <prvAddNewTaskToReadyList+0xc0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00e      	beq.n	8001dc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <prvAddNewTaskToReadyList+0xd0>)
 8001db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200003dc 	.word	0x200003dc
 8001dcc:	200002dc 	.word	0x200002dc
 8001dd0:	200003e8 	.word	0x200003e8
 8001dd4:	200003f8 	.word	0x200003f8
 8001dd8:	200003e4 	.word	0x200003e4
 8001ddc:	200002e0 	.word	0x200002e0
 8001de0:	e000ed04 	.word	0xe000ed04

08001de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d018      	beq.n	8001e28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001df6:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <vTaskDelay+0x64>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <vTaskDelay+0x32>
	__asm volatile
 8001dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	60bb      	str	r3, [r7, #8]
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	e7fd      	b.n	8001e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001e16:	f000 f87d 	bl	8001f14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb11 	bl	8002444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001e22:	f000 f885 	bl	8001f30 <xTaskResumeAll>
 8001e26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d107      	bne.n	8001e3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <vTaskDelay+0x68>)
 8001e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000404 	.word	0x20000404
 8001e4c:	e000ed04 	.word	0xe000ed04

08001e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001e5e:	463a      	mov	r2, r7
 8001e60:	1d39      	adds	r1, r7, #4
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe f972 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	9202      	str	r2, [sp, #8]
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	2300      	movs	r3, #0
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	491f      	ldr	r1, [pc, #124]	@ (8001efc <vTaskStartScheduler+0xac>)
 8001e80:	481f      	ldr	r0, [pc, #124]	@ (8001f00 <vTaskStartScheduler+0xb0>)
 8001e82:	f7ff fe18 	bl	8001ab6 <xTaskCreateStatic>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <vTaskStartScheduler+0xb4>)
 8001e8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <vTaskStartScheduler+0xb4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001e94:	2301      	movs	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e001      	b.n	8001e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d116      	bne.n	8001ed2 <vTaskStartScheduler+0x82>
	__asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	613b      	str	r3, [r7, #16]
}
 8001eb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <vTaskStartScheduler+0xb8>)
 8001eba:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <vTaskStartScheduler+0xbc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <vTaskStartScheduler+0xc0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ecc:	f000 fb9c 	bl	8002608 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ed0:	e00f      	b.n	8001ef2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d10b      	bne.n	8001ef2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8001eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ede:	f383 8811 	msr	BASEPRI, r3
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	f3bf 8f4f 	dsb	sy
 8001eea:	60fb      	str	r3, [r7, #12]
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	e7fd      	b.n	8001eee <vTaskStartScheduler+0x9e>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	08002d34 	.word	0x08002d34
 8001f00:	08002299 	.word	0x08002299
 8001f04:	20000400 	.word	0x20000400
 8001f08:	200003fc 	.word	0x200003fc
 8001f0c:	200003e8 	.word	0x200003e8
 8001f10:	200003e0 	.word	0x200003e0

08001f14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <vTaskSuspendAll+0x18>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a03      	ldr	r2, [pc, #12]	@ (8001f2c <vTaskSuspendAll+0x18>)
 8001f20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000404 	.word	0x20000404

08001f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001f3e:	4b42      	ldr	r3, [pc, #264]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <xTaskResumeAll+0x2e>
	__asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	603b      	str	r3, [r7, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001f5e:	f000 fbc5 	bl	80026ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	4a37      	ldr	r2, [pc, #220]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f6c:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d161      	bne.n	8002038 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f74:	4b35      	ldr	r3, [pc, #212]	@ (800204c <xTaskResumeAll+0x11c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05d      	beq.n	8002038 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f7c:	e02e      	b.n	8001fdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <xTaskResumeAll+0x120>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3318      	adds	r3, #24
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd6a 	bl	8001a64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd65 	bl	8001a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002054 <xTaskResumeAll+0x124>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8002054 <xTaskResumeAll+0x124>)
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <xTaskResumeAll+0x128>)
 8001fba:	441a      	add	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f7ff fcf3 	bl	80019ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fcc:	4b23      	ldr	r3, [pc, #140]	@ (800205c <xTaskResumeAll+0x12c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001fd6:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <xTaskResumeAll+0x130>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <xTaskResumeAll+0x120>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1cc      	bne.n	8001f7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001fea:	f000 fa0b 	bl	8002404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <xTaskResumeAll+0x134>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ffa:	f000 f837 	bl	800206c <xTaskIncrementTick>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002004:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <xTaskResumeAll+0x130>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3b01      	subs	r3, #1
 800200e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f1      	bne.n	8001ffa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <xTaskResumeAll+0x134>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800201c:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <xTaskResumeAll+0x130>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002024:	2301      	movs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <xTaskResumeAll+0x138>)
 800202a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002038:	f000 fb88 	bl	800274c <vPortExitCritical>

	return xAlreadyYielded;
 800203c:	68bb      	ldr	r3, [r7, #8]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000404 	.word	0x20000404
 800204c:	200003dc 	.word	0x200003dc
 8002050:	2000039c 	.word	0x2000039c
 8002054:	200003e4 	.word	0x200003e4
 8002058:	200002e0 	.word	0x200002e0
 800205c:	200002dc 	.word	0x200002dc
 8002060:	200003f0 	.word	0x200003f0
 8002064:	200003ec 	.word	0x200003ec
 8002068:	e000ed04 	.word	0xe000ed04

0800206c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002076:	4b4f      	ldr	r3, [pc, #316]	@ (80021b4 <xTaskIncrementTick+0x148>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 808f 	bne.w	800219e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002080:	4b4d      	ldr	r3, [pc, #308]	@ (80021b8 <xTaskIncrementTick+0x14c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002088:	4a4b      	ldr	r2, [pc, #300]	@ (80021b8 <xTaskIncrementTick+0x14c>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d121      	bne.n	80020d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002094:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <xTaskIncrementTick+0x150>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800209e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	603b      	str	r3, [r7, #0]
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	e7fd      	b.n	80020b2 <xTaskIncrementTick+0x46>
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <xTaskIncrementTick+0x154>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4a3e      	ldr	r2, [pc, #248]	@ (80021c0 <xTaskIncrementTick+0x154>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <xTaskIncrementTick+0x158>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a3c      	ldr	r2, [pc, #240]	@ (80021c4 <xTaskIncrementTick+0x158>)
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	f000 f996 	bl	8002404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80020d8:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <xTaskIncrementTick+0x15c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d348      	bcc.n	8002174 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <xTaskIncrementTick+0x15c>)
 80020ee:	f04f 32ff 	mov.w	r2, #4294967295
 80020f2:	601a      	str	r2, [r3, #0]
					break;
 80020f4:	e03e      	b.n	8002174 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020f6:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d203      	bcs.n	8002116 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800210e:	4a2e      	ldr	r2, [pc, #184]	@ (80021c8 <xTaskIncrementTick+0x15c>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002114:	e02e      	b.n	8002174 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3304      	adds	r3, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fca2 	bl	8001a64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3318      	adds	r3, #24
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fc99 	bl	8001a64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <xTaskIncrementTick+0x160>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	4a22      	ldr	r2, [pc, #136]	@ (80021cc <xTaskIncrementTick+0x160>)
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <xTaskIncrementTick+0x164>)
 8002152:	441a      	add	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fc27 	bl	80019ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <xTaskIncrementTick+0x168>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	429a      	cmp	r2, r3
 800216c:	d3b9      	bcc.n	80020e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800216e:	2301      	movs	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002172:	e7b6      	b.n	80020e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <xTaskIncrementTick+0x168>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217a:	4915      	ldr	r1, [pc, #84]	@ (80021d0 <xTaskIncrementTick+0x164>)
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d901      	bls.n	8002190 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800218c:	2301      	movs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <xTaskIncrementTick+0x16c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e004      	b.n	80021a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <xTaskIncrementTick+0x170>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <xTaskIncrementTick+0x170>)
 80021a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80021a8:	697b      	ldr	r3, [r7, #20]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000404 	.word	0x20000404
 80021b8:	200003e0 	.word	0x200003e0
 80021bc:	20000394 	.word	0x20000394
 80021c0:	20000398 	.word	0x20000398
 80021c4:	200003f4 	.word	0x200003f4
 80021c8:	200003fc 	.word	0x200003fc
 80021cc:	200003e4 	.word	0x200003e4
 80021d0:	200002e0 	.word	0x200002e0
 80021d4:	200002dc 	.word	0x200002dc
 80021d8:	200003f0 	.word	0x200003f0
 80021dc:	200003ec 	.word	0x200003ec

080021e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021e6:	4b27      	ldr	r3, [pc, #156]	@ (8002284 <vTaskSwitchContext+0xa4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <vTaskSwitchContext+0xa8>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80021f4:	e040      	b.n	8002278 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80021f6:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <vTaskSwitchContext+0xa8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <vTaskSwitchContext+0xac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	f1c3 031f 	rsb	r3, r3, #31
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	491f      	ldr	r1, [pc, #124]	@ (8002290 <vTaskSwitchContext+0xb0>)
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <vTaskSwitchContext+0x5e>
	__asm volatile
 8002226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222a:	f383 8811 	msr	BASEPRI, r3
 800222e:	f3bf 8f6f 	isb	sy
 8002232:	f3bf 8f4f 	dsb	sy
 8002236:	607b      	str	r3, [r7, #4]
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	e7fd      	b.n	800223a <vTaskSwitchContext+0x5a>
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <vTaskSwitchContext+0xb0>)
 800224a:	4413      	add	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3308      	adds	r3, #8
 8002260:	429a      	cmp	r2, r3
 8002262:	d104      	bne.n	800226e <vTaskSwitchContext+0x8e>
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <vTaskSwitchContext+0xb4>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000404 	.word	0x20000404
 8002288:	200003f0 	.word	0x200003f0
 800228c:	200003e4 	.word	0x200003e4
 8002290:	200002e0 	.word	0x200002e0
 8002294:	200002dc 	.word	0x200002dc

08002298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80022a0:	f000 f852 	bl	8002348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <prvIdleTask+0x28>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d9f9      	bls.n	80022a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <prvIdleTask+0x2c>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80022bc:	e7f0      	b.n	80022a0 <prvIdleTask+0x8>
 80022be:	bf00      	nop
 80022c0:	200002e0 	.word	0x200002e0
 80022c4:	e000ed04 	.word	0xe000ed04

080022c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	e00c      	b.n	80022ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <prvInitialiseTaskLists+0x60>)
 80022e0:	4413      	add	r3, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fb38 	bl	8001958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3301      	adds	r3, #1
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d9ef      	bls.n	80022d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80022f4:	480d      	ldr	r0, [pc, #52]	@ (800232c <prvInitialiseTaskLists+0x64>)
 80022f6:	f7ff fb2f 	bl	8001958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80022fa:	480d      	ldr	r0, [pc, #52]	@ (8002330 <prvInitialiseTaskLists+0x68>)
 80022fc:	f7ff fb2c 	bl	8001958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <prvInitialiseTaskLists+0x6c>)
 8002302:	f7ff fb29 	bl	8001958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002306:	480c      	ldr	r0, [pc, #48]	@ (8002338 <prvInitialiseTaskLists+0x70>)
 8002308:	f7ff fb26 	bl	8001958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800230c:	480b      	ldr	r0, [pc, #44]	@ (800233c <prvInitialiseTaskLists+0x74>)
 800230e:	f7ff fb23 	bl	8001958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <prvInitialiseTaskLists+0x78>)
 8002314:	4a05      	ldr	r2, [pc, #20]	@ (800232c <prvInitialiseTaskLists+0x64>)
 8002316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002318:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <prvInitialiseTaskLists+0x7c>)
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <prvInitialiseTaskLists+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200002e0 	.word	0x200002e0
 800232c:	2000036c 	.word	0x2000036c
 8002330:	20000380 	.word	0x20000380
 8002334:	2000039c 	.word	0x2000039c
 8002338:	200003b0 	.word	0x200003b0
 800233c:	200003c8 	.word	0x200003c8
 8002340:	20000394 	.word	0x20000394
 8002344:	20000398 	.word	0x20000398

08002348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800234e:	e019      	b.n	8002384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002350:	f000 f9cc 	bl	80026ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002354:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <prvCheckTasksWaitingTermination+0x50>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fb7f 	bl	8001a64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <prvCheckTasksWaitingTermination+0x54>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3b01      	subs	r3, #1
 800236c:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <prvCheckTasksWaitingTermination+0x54>)
 800236e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <prvCheckTasksWaitingTermination+0x58>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3b01      	subs	r3, #1
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <prvCheckTasksWaitingTermination+0x58>)
 8002378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800237a:	f000 f9e7 	bl	800274c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f810 	bl	80023a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <prvCheckTasksWaitingTermination+0x58>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e1      	bne.n	8002350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200003b0 	.word	0x200003b0
 800239c:	200003dc 	.word	0x200003dc
 80023a0:	200003c4 	.word	0x200003c4

080023a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fb26 	bl	8002a0c <vPortFree>
				vPortFree( pxTCB );
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fb23 	bl	8002a0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80023c6:	e019      	b.n	80023fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d103      	bne.n	80023da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fb1a 	bl	8002a0c <vPortFree>
	}
 80023d8:	e010      	b.n	80023fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d00b      	beq.n	80023fc <prvDeleteTCB+0x58>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60fb      	str	r3, [r7, #12]
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <prvDeleteTCB+0x54>
	}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <prvResetNextTaskUnblockTime+0x38>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <prvResetNextTaskUnblockTime+0x3c>)
 8002416:	f04f 32ff 	mov.w	r2, #4294967295
 800241a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800241c:	e008      	b.n	8002430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800241e:	4b07      	ldr	r3, [pc, #28]	@ (800243c <prvResetNextTaskUnblockTime+0x38>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <prvResetNextTaskUnblockTime+0x3c>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000394 	.word	0x20000394
 8002440:	200003fc 	.word	0x200003fc

08002444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800244e:	4b29      	ldr	r3, [pc, #164]	@ (80024f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3304      	adds	r3, #4
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fb02 	bl	8001a64 <uxListRemove>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10b      	bne.n	800247e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	2201      	movs	r2, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	4b21      	ldr	r3, [pc, #132]	@ (80024fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4013      	ands	r3, r2
 800247a:	4a20      	ldr	r2, [pc, #128]	@ (80024fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800247c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d10a      	bne.n	800249c <prvAddCurrentTaskToDelayedList+0x58>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3304      	adds	r3, #4
 8002492:	4619      	mov	r1, r3
 8002494:	481a      	ldr	r0, [pc, #104]	@ (8002500 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002496:	f7ff fa8a 	bl	80019ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800249a:	e026      	b.n	80024ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024a4:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d209      	bcs.n	80024c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024b4:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <prvAddCurrentTaskToDelayedList+0xc0>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7ff fa97 	bl	80019f4 <vListInsert>
}
 80024c6:	e010      	b.n	80024ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xc4>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3304      	adds	r3, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7ff fa8d 	bl	80019f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <prvAddCurrentTaskToDelayedList+0xc8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d202      	bcs.n	80024ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80024e4:	4a09      	ldr	r2, [pc, #36]	@ (800250c <prvAddCurrentTaskToDelayedList+0xc8>)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6013      	str	r3, [r2, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200003e0 	.word	0x200003e0
 80024f8:	200002dc 	.word	0x200002dc
 80024fc:	200003e4 	.word	0x200003e4
 8002500:	200003c8 	.word	0x200003c8
 8002504:	20000398 	.word	0x20000398
 8002508:	20000394 	.word	0x20000394
 800250c:	200003fc 	.word	0x200003fc

08002510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3b04      	subs	r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3b04      	subs	r3, #4
 800252e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f023 0201 	bic.w	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3b04      	subs	r3, #4
 800253e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002540:	4a08      	ldr	r2, [pc, #32]	@ (8002564 <pxPortInitialiseStack+0x54>)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b14      	subs	r3, #20
 800254a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3b20      	subs	r3, #32
 8002556:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	08002569 	.word	0x08002569

08002568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <prvTaskExitError+0x54>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d00b      	beq.n	8002594 <prvTaskExitError+0x2c>
	__asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	60fb      	str	r3, [r7, #12]
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <prvTaskExitError+0x28>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	60bb      	str	r3, [r7, #8]
}
 80025a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80025a8:	bf00      	nop
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0fc      	beq.n	80025aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	20000010 	.word	0x20000010

080025c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <pxCurrentTCBConst2>)
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	6808      	ldr	r0, [r1, #0]
 80025c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80025ca:	f380 8809 	msr	PSP, r0
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f380 8811 	msr	BASEPRI, r0
 80025da:	f04e 0e0d 	orr.w	lr, lr, #13
 80025de:	4770      	bx	lr

080025e0 <pxCurrentTCBConst2>:
 80025e0:	200002dc 	.word	0x200002dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop

080025e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80025e8:	4806      	ldr	r0, [pc, #24]	@ (8002604 <prvPortStartFirstTask+0x1c>)
 80025ea:	6800      	ldr	r0, [r0, #0]
 80025ec:	6800      	ldr	r0, [r0, #0]
 80025ee:	f380 8808 	msr	MSP, r0
 80025f2:	b662      	cpsie	i
 80025f4:	b661      	cpsie	f
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	df00      	svc	0
 8002600:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002602:	bf00      	nop
 8002604:	e000ed08 	.word	0xe000ed08

08002608 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800260e:	4b32      	ldr	r3, [pc, #200]	@ (80026d8 <xPortStartScheduler+0xd0>)
 8002610:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	22ff      	movs	r2, #255	@ 0xff
 800261e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <xPortStartScheduler+0xd4>)
 8002634:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002636:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <xPortStartScheduler+0xd8>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800263c:	e009      	b.n	8002652 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800263e:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <xPortStartScheduler+0xd8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3b01      	subs	r3, #1
 8002644:	4a26      	ldr	r2, [pc, #152]	@ (80026e0 <xPortStartScheduler+0xd8>)
 8002646:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265a:	2b80      	cmp	r3, #128	@ 0x80
 800265c:	d0ef      	beq.n	800263e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <xPortStartScheduler+0xd8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	d00b      	beq.n	8002682 <xPortStartScheduler+0x7a>
	__asm volatile
 800266a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	60bb      	str	r3, [r7, #8]
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	e7fd      	b.n	800267e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002682:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <xPortStartScheduler+0xd8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	4a15      	ldr	r2, [pc, #84]	@ (80026e0 <xPortStartScheduler+0xd8>)
 800268a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800268c:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <xPortStartScheduler+0xd8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002694:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <xPortStartScheduler+0xd8>)
 8002696:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80026a0:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <xPortStartScheduler+0xdc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0f      	ldr	r2, [pc, #60]	@ (80026e4 <xPortStartScheduler+0xdc>)
 80026a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80026ac:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <xPortStartScheduler+0xdc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <xPortStartScheduler+0xdc>)
 80026b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80026b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80026b8:	f000 f8b8 	bl	800282c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <xPortStartScheduler+0xe0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80026c2:	f7ff ff91 	bl	80025e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80026c6:	f7ff fd8b 	bl	80021e0 <vTaskSwitchContext>
	prvTaskExitError();
 80026ca:	f7ff ff4d 	bl	8002568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	e000e400 	.word	0xe000e400
 80026dc:	20000408 	.word	0x20000408
 80026e0:	2000040c 	.word	0x2000040c
 80026e4:	e000ed20 	.word	0xe000ed20
 80026e8:	20000010 	.word	0x20000010

080026ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	607b      	str	r3, [r7, #4]
}
 8002704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002706:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <vPortEnterCritical+0x58>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <vPortEnterCritical+0x58>)
 800270e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <vPortEnterCritical+0x58>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d110      	bne.n	800273a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <vPortEnterCritical+0x5c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <vPortEnterCritical+0x4e>
	__asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	603b      	str	r3, [r7, #0]
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	e7fd      	b.n	8002736 <vPortEnterCritical+0x4a>
	}
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000010 	.word	0x20000010
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <vPortExitCritical+0x50>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <vPortExitCritical+0x26>
	__asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	607b      	str	r3, [r7, #4]
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <vPortExitCritical+0x50>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3b01      	subs	r3, #1
 8002778:	4a08      	ldr	r2, [pc, #32]	@ (800279c <vPortExitCritical+0x50>)
 800277a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800277c:	4b07      	ldr	r3, [pc, #28]	@ (800279c <vPortExitCritical+0x50>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <vPortExitCritical+0x44>
 8002784:	2300      	movs	r3, #0
 8002786:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800278e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000010 	.word	0x20000010

080027a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80027a0:	f3ef 8009 	mrs	r0, PSP
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <pxCurrentTCBConst>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027b0:	6010      	str	r0, [r2, #0]
 80027b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80027b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80027ba:	f380 8811 	msr	BASEPRI, r0
 80027be:	f7ff fd0f 	bl	80021e0 <vTaskSwitchContext>
 80027c2:	f04f 0000 	mov.w	r0, #0
 80027c6:	f380 8811 	msr	BASEPRI, r0
 80027ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	6808      	ldr	r0, [r1, #0]
 80027d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027d6:	f380 8809 	msr	PSP, r0
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	4770      	bx	lr

080027e0 <pxCurrentTCBConst>:
 80027e0:	200002dc 	.word	0x200002dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop

080027e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	__asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	607b      	str	r3, [r7, #4]
}
 8002800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002802:	f7ff fc33 	bl	800206c <xTaskIncrementTick>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <SysTick_Handler+0x40>)
 800280e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f383 8811 	msr	BASEPRI, r3
}
 800281e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002830:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <vPortSetupTimerInterrupt+0x30>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002836:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <vPortSetupTimerInterrupt+0x34>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <vPortSetupTimerInterrupt+0x38>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a09      	ldr	r2, [pc, #36]	@ (8002868 <vPortSetupTimerInterrupt+0x3c>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	4a08      	ldr	r2, [pc, #32]	@ (800286c <vPortSetupTimerInterrupt+0x40>)
 800284a:	3b01      	subs	r3, #1
 800284c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800284e:	4b03      	ldr	r3, [pc, #12]	@ (800285c <vPortSetupTimerInterrupt+0x30>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	e000e010 	.word	0xe000e010
 8002860:	e000e018 	.word	0xe000e018
 8002864:	20000004 	.word	0x20000004
 8002868:	10624dd3 	.word	0x10624dd3
 800286c:	e000e014 	.word	0xe000e014

08002870 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	@ 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800287c:	f7ff fb4a 	bl	8001f14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002880:	4b5c      	ldr	r3, [pc, #368]	@ (80029f4 <pvPortMalloc+0x184>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002888:	f000 f924 	bl	8002ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800288c:	4b5a      	ldr	r3, [pc, #360]	@ (80029f8 <pvPortMalloc+0x188>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 8095 	bne.w	80029c4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01e      	beq.n	80028de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80028a0:	2208      	movs	r2, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d015      	beq.n	80028de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f023 0307 	bic.w	r3, r3, #7
 80028b8:	3308      	adds	r3, #8
 80028ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <pvPortMalloc+0x6e>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	617b      	str	r3, [r7, #20]
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	e7fd      	b.n	80028da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d06f      	beq.n	80029c4 <pvPortMalloc+0x154>
 80028e4:	4b45      	ldr	r3, [pc, #276]	@ (80029fc <pvPortMalloc+0x18c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d86a      	bhi.n	80029c4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80028ee:	4b44      	ldr	r3, [pc, #272]	@ (8002a00 <pvPortMalloc+0x190>)
 80028f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80028f2:	4b43      	ldr	r3, [pc, #268]	@ (8002a00 <pvPortMalloc+0x190>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028f8:	e004      	b.n	8002904 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d903      	bls.n	8002916 <pvPortMalloc+0xa6>
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f1      	bne.n	80028fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002916:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <pvPortMalloc+0x184>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	429a      	cmp	r2, r3
 800291e:	d051      	beq.n	80029c4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2208      	movs	r2, #8
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1ad2      	subs	r2, r2, r3
 800293a:	2308      	movs	r3, #8
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	429a      	cmp	r2, r3
 8002940:	d920      	bls.n	8002984 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <pvPortMalloc+0xfc>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	613b      	str	r3, [r7, #16]
}
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1ad2      	subs	r2, r2, r3
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800297e:	69b8      	ldr	r0, [r7, #24]
 8002980:	f000 f90a 	bl	8002b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002984:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <pvPortMalloc+0x18c>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <pvPortMalloc+0x18c>)
 8002990:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002992:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <pvPortMalloc+0x18c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <pvPortMalloc+0x194>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d203      	bcs.n	80029a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800299e:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <pvPortMalloc+0x18c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a18      	ldr	r2, [pc, #96]	@ (8002a04 <pvPortMalloc+0x194>)
 80029a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <pvPortMalloc+0x188>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80029ba:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <pvPortMalloc+0x198>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a11      	ldr	r2, [pc, #68]	@ (8002a08 <pvPortMalloc+0x198>)
 80029c2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80029c4:	f7ff fab4 	bl	8001f30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <pvPortMalloc+0x17a>
	__asm volatile
 80029d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	60fb      	str	r3, [r7, #12]
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	e7fd      	b.n	80029e6 <pvPortMalloc+0x176>
	return pvReturn;
 80029ea:	69fb      	ldr	r3, [r7, #28]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3728      	adds	r7, #40	@ 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20001018 	.word	0x20001018
 80029f8:	2000102c 	.word	0x2000102c
 80029fc:	2000101c 	.word	0x2000101c
 8002a00:	20001010 	.word	0x20001010
 8002a04:	20001020 	.word	0x20001020
 8002a08:	20001024 	.word	0x20001024

08002a0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d04f      	beq.n	8002abe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002a1e:	2308      	movs	r3, #8
 8002a20:	425b      	negs	r3, r3
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4413      	add	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <vPortFree+0xbc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10b      	bne.n	8002a52 <vPortFree+0x46>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60fb      	str	r3, [r7, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	e7fd      	b.n	8002a4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <vPortFree+0x66>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	60bb      	str	r3, [r7, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	e7fd      	b.n	8002a6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <vPortFree+0xbc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01e      	beq.n	8002abe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11a      	bne.n	8002abe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <vPortFree+0xbc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a98:	f7ff fa3c 	bl	8001f14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <vPortFree+0xc0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <vPortFree+0xc0>)
 8002aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002aaa:	6938      	ldr	r0, [r7, #16]
 8002aac:	f000 f874 	bl	8002b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <vPortFree+0xc4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a06      	ldr	r2, [pc, #24]	@ (8002ad0 <vPortFree+0xc4>)
 8002ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002aba:	f7ff fa39 	bl	8001f30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000102c 	.word	0x2000102c
 8002acc:	2000101c 	.word	0x2000101c
 8002ad0:	20001028 	.word	0x20001028

08002ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ada:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <prvHeapInit+0xac>)
 8002ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3307      	adds	r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0307 	bic.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <prvHeapInit+0xac>)
 8002b04:	4413      	add	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <prvHeapInit+0xb0>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <prvHeapInit+0xb0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002b20:	2208      	movs	r2, #8
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0307 	bic.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <prvHeapInit+0xb4>)
 8002b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002b36:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <prvHeapInit+0xb4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <prvHeapInit+0xb4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	1ad2      	subs	r2, r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <prvHeapInit+0xb4>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <prvHeapInit+0xb8>)
 8002b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a09      	ldr	r2, [pc, #36]	@ (8002b90 <prvHeapInit+0xbc>)
 8002b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <prvHeapInit+0xc0>)
 8002b6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000410 	.word	0x20000410
 8002b84:	20001010 	.word	0x20001010
 8002b88:	20001018 	.word	0x20001018
 8002b8c:	20001020 	.word	0x20001020
 8002b90:	2000101c 	.word	0x2000101c
 8002b94:	2000102c 	.word	0x2000102c

08002b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ba0:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <prvInsertBlockIntoFreeList+0xa8>)
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e002      	b.n	8002bac <prvInsertBlockIntoFreeList+0x14>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d8f7      	bhi.n	8002ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d108      	bne.n	8002bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	441a      	add	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d118      	bne.n	8002c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <prvInsertBlockIntoFreeList+0xac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d00d      	beq.n	8002c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e008      	b.n	8002c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <prvInsertBlockIntoFreeList+0xac>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e003      	b.n	8002c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d002      	beq.n	8002c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20001010 	.word	0x20001010
 8002c44:	20001018 	.word	0x20001018

08002c48 <memset>:
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4402      	add	r2, r0
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <memset+0xa>
 8002c50:	4770      	bx	lr
 8002c52:	f803 1b01 	strb.w	r1, [r3], #1
 8002c56:	e7f9      	b.n	8002c4c <memset+0x4>

08002c58 <__libc_init_array>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	2600      	movs	r6, #0
 8002c5c:	4d0c      	ldr	r5, [pc, #48]	@ (8002c90 <__libc_init_array+0x38>)
 8002c5e:	4c0d      	ldr	r4, [pc, #52]	@ (8002c94 <__libc_init_array+0x3c>)
 8002c60:	1b64      	subs	r4, r4, r5
 8002c62:	10a4      	asrs	r4, r4, #2
 8002c64:	42a6      	cmp	r6, r4
 8002c66:	d109      	bne.n	8002c7c <__libc_init_array+0x24>
 8002c68:	f000 f81a 	bl	8002ca0 <_init>
 8002c6c:	2600      	movs	r6, #0
 8002c6e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c98 <__libc_init_array+0x40>)
 8002c70:	4c0a      	ldr	r4, [pc, #40]	@ (8002c9c <__libc_init_array+0x44>)
 8002c72:	1b64      	subs	r4, r4, r5
 8002c74:	10a4      	asrs	r4, r4, #2
 8002c76:	42a6      	cmp	r6, r4
 8002c78:	d105      	bne.n	8002c86 <__libc_init_array+0x2e>
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c80:	4798      	blx	r3
 8002c82:	3601      	adds	r6, #1
 8002c84:	e7ee      	b.n	8002c64 <__libc_init_array+0xc>
 8002c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8a:	4798      	blx	r3
 8002c8c:	3601      	adds	r6, #1
 8002c8e:	e7f2      	b.n	8002c76 <__libc_init_array+0x1e>
 8002c90:	08002d68 	.word	0x08002d68
 8002c94:	08002d68 	.word	0x08002d68
 8002c98:	08002d68 	.word	0x08002d68
 8002c9c:	08002d6c 	.word	0x08002d6c

08002ca0 <_init>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr

08002cac <_fini>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr
